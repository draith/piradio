// Original code: https://github.com/rikkertkoppes/omxcontrol

// Modified by djazz / daniel-j to suit needs.

var child_process = require('child_process');
var exec = child_process.exec;
var spawn = child_process.spawn;
var parseurl = require('url');
var pipe = false;

var omx = {};
var isPlaying = true;
var wasKilled = false;
var playlist = [];

exec('killall omxplayer.bin');

omx.play_list = function(toplay) {
	playlist = toplay.slice(1);
	console.log('play_list: ' + toplay[0] + ', next ' + playlist[0]);
	omx.start(toplay[0],'', function() { } );
}

omx.start = function(file, args, started) {
	//var file;
	console.log('omx.start called...');
/*	if (playlist.length > 0) {
		file = playlist[0];
		console.log('playlist[0] = ' + file);
		playlist = playlist.slice(1);
		if (playlist.length > 0) {
			console.log('next is ' + playlist[0]);
		}
	}
	else if (typeof(toplay) === 'string') {
		file = toplay;
		console.log('toplay = ' + file);
	}
	else {
		// Playlist
		file = toplay[0];
		playlist = toplay.slice(1);
		console.log('Playlist: first file = ' + file);
	}
	*/
	if (!pipe) {
		pipe = 'omxpipe';
		wasKilled = false;
		isPlaying = true;
		exec('mkfifo '+pipe, pipemade);
		console.log('making pipe..');
	} else {
		console.log("Pipe already exists! Restarting...");
		omx.stop(function () {
			omx.start(file, args, started);
		});
	}
	function pipemade() {
	/*	if (typeof(toplay) === 'string') {
			file = toplay;
		}
		else {
			// Playlist
			file = toplay[0];
			playlist = toplay.slice(1);
			console.log('Playlist: first file = ' + file);
		} */
		var cmd = 'omxplayer -o local ' + args + ' "'+file+'" < '+pipe;
		console.log("Exec:", cmd.substr(0, 120));
		exec(cmd, function (error, stdout, stderr) {
			//console.log(error, stdout, stderr);
			omx.onstop(wasKilled, stdout);
			isPlaying = false;
		});
		// Send play command..
		exec('echo . > '+pipe, started);
	}
};

omx.sendKey = function(key, cb) {
	if (!pipe) return;
	exec('echo -n '+key+' > '+pipe, cb);
};

omx.mapKey = function(command,key,then) {
	omx[command] = function(cb) {
		omx.sendKey(key, function () {
			if (then) {
				then(cb);
			} else if (cb) {
				cb();
			}
		});
		
	};
};

omx.stop = function(cb) {
	if (!pipe) {
		cb();
		return;
	}
	console.log('killing omxplayer..');
	wasKilled = true;
	exec('rm '+pipe, function () {
		pipe = false;
		exec('killall omxplayer.bin', cb);
	});
};

omx.onstop = function (killed, stdout) { 
	console.log('omx.onstop(' + killed + ')'); 
/*	if (playlist.length > 0) {
		// If there's a playlist, remove the first file from it,
		// and play that first file.
		var nextFile = playlist[0];
		playlist = playlist.slice(1);
		console.log('Playlist: next file = ' + nextFile);
		omx.start(nextFile, '', function() { } );
	}
	*/
};

omx.mapKey('quit','q',function() { omx.stop(); });
omx.mapKey('play','.');
omx.mapKey('pause','p');
//omx.mapKey('forward',"$'\\x1b\\x5b\\x43'");
//omx.mapKey('backward',"$'\\x1b\\x5b\\x44'");
//omx.mapKey('backward', "\x5b\x44");
//omx.mapKey('forward', "\x5b\x43");
omx.mapKey('volUp','+');
omx.mapKey('volDown','-');
omx.mapKey('prevStream','j');
omx.mapKey('nextStream','k');

module.exports = omx;
