// Original code: https://github.com/rikkertkoppes/omxcontrol

// Modified by djazz / daniel-j to suit needs.

var child_process = require('child_process');
var exec = child_process.exec;
var spawn = child_process.spawn;
var parseurl = require('url');
var pipe = false;

var omx = {};
var isPlaying = true;
var wasKilled = false;
var playlist = [];
var playArgs = '';

exec('killall omxplayer.bin');

function makepipe() {
	console.log('>> makepipe()');
	pipe = 'omxpipe';
	wasKilled = false;
	isPlaying = true;
	exec('mkfifo '+pipe, runplayer);
	console.log('making pipe..');
}

omx.start = function(file, args, started) {
	omx.play_list([ file ], args);
}

omx.play_list = function(toplay, args) {
	console.log('>> omx.play_list');
 	playlist = toplay;
	playArgs = (args === undefined ? '' : args);

	if (!pipe) {
		makepipe();
	} else {
		console.log("Pipe already exists! Restarting...");
		omx.stop(function () {
			makepipe();
		});
	}
};

function runplayer() {
	if (playlist.length == 0)
	{
		console.log('runplayer() - empty playlist');
		return;
	}
	var cmd = 'omxplayer -o local ' + playArgs + ' "' + playlist.shift() + '" < '+pipe;
	console.log("Exec:", cmd.substr(0, 120));
	exec(cmd, function (error, stdout, stderr) {
		console.log('omxplayer ended');
		omx.onstop(wasKilled, stdout);
		isPlaying = false;
	});
	// Send play command..
	exec('echo . > '+pipe, function() { console.log('Sent play command'); } );
}

omx.sendKey = function(key, cb) {
	if (!pipe) return;
	exec('echo -n '+key+' > '+pipe, cb);
};

omx.mapKey = function(command,key,then) {
	omx[command] = function(cb) {
		omx.sendKey(key, function () {
			if (then) {
				then(cb);
			} else if (cb) {
				cb();
			}
		});
		
	};
};

omx.stop = function(cb) {
	console.log('>> omx.stop');
	if (!pipe) {
		cb();
		return;
	}
	console.log('killing omxplayer..');
	wasKilled = true;
	exec('rm '+pipe, function () {
		pipe = false;
		exec('killall omxplayer.bin', cb);
	});
};

omx.onstop = function (killed, stdout) { 
	console.log('>> omx.onstop(' + killed + ')'); 
	if (playlist.length > 0) {
		var nextFile = playlist[0];
		console.log('Playlist: next file = ' + nextFile);
		runplayer();
	}
	else {
		console.log('onstop: Playlist empty.');
		//omx.stop(function() { });
	}
};

omx.mapKey('quit','q',function() { omx.stop(); });
omx.mapKey('play','.');
omx.mapKey('pause','p');
//omx.mapKey('forward',"$'\\x1b\\x5b\\x43'");
//omx.mapKey('backward',"$'\\x1b\\x5b\\x44'");
//omx.mapKey('backward', "\x5b\x44");
//omx.mapKey('forward', "\x5b\x43");
omx.mapKey('volUp','+');
omx.mapKey('volDown','-');
omx.mapKey('prevStream','j');
omx.mapKey('nextStream','k');

module.exports = omx;
